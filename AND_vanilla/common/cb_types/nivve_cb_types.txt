## normal scopes(including posttitle scopes) ##
# ROOT = receiver
# FROM = giver
# <no scope change> = attacker or receiver
## title scopes ##
# ROOT = receiver
# FROM = giver
# <no scope change> = thirdparty landed title	
#
# the following effects/triggers exists (example execution order: on_success->on_success_title->on_success_posttitle):
# is_valid, is_valid_title, on_add, on_add_title, on_add_posttitle, on_success, on_success_title, on_success_posttitle, on_fail, on_fail_title, on_fail_posttitle, on_reverse_demand, on_reverse_demand_title, on_reverse_demand_posttitle
#
# Added on_attacker_leader_death, on_defender_leader_death and on_thirdparty_death, which all trigger when corresponding character dies
# These three all have war scopes, which currently has the following scope changes: 
# attacker, defender, thirdparty(only valid if thirdparty character is involved), thirdparty_title(only valid if thirdparty title is involved)
#
# Added ai_will_do, modifies value AI places on the CB compared to other CBs (default: 1)
#

noliege_conquest_counts = {
	name = CB_NAME_NOLIEGE_COUNTS
	war_name = WAR_NAME_NOLIEGE_COUNTS
	sprite = 1
	truce_days = 1095
	hostile_against_others = yes
	is_permanent = yes
	can_call_allies = no # Can either side call allies
	can_attack_vassals = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	can_ask_to_join_war = yes
	
	can_use = { 
		ROOT = { NOT = { has_character_modifier = holding_epic_tournament }	}
		ROOT = { NOT = { has_character_modifier = holy_truce_timer } }
		FROM = { NOT = { has_character_modifier = holy_truce_timer } }
		ROOT = { 
			AND = { 
				primary_title = { tier = COUNT } 
				NOT = { num_of_count_titles = 3 }
			}
		}
		FROM = { 
			AND = {
				primary_title = { tier = COUNT }
				NOT = { num_of_count_titles = 3 }
			}
		}
	}
	
	can_use_title = {
		tier = count
		location = { 
			AND = { 
				has_province_modifier = no_liege
				any_neighbor_province = {
					AND = {
						owner = { character = ROOT }
						location = { has_province_modifier = no_liege }
					}
				}
			}
		}
	}
	is_valid_title = {
		FROM = {
				has_landed_title = PREV
				NOT = { num_of_count_titles = 3 }
		}
		location = { 
			AND = { 
				has_province_modifier = no_liege
				any_neighbor_province = {
					AND = {
						owner = { character = ROOT }
						location = { has_province_modifier = no_liege }
					}
				}
			}
		}
	}
	
	on_add = {
	}
	
	on_success = {
		ROOT = { add_character_modifier = { name = victory_timer duration = 3 hidden = yes } }
	}
		
	
	on_success_title = {	
		usurp_title_plus_barony_if_unlanded = ROOT
		any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
			limit = {
				has_holder = yes
				NOT = {
					de_facto_liege = PREV
				}
				holder_scope = {
					OR = {
						character = FROM
						is_liege_or_above = FROM
					}
				}
			}

			usurp_title_plus_barony_if_unlanded = ROOT
		}
	}

	on_fail = {
		ROOT = {
			prestige = -100
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -200
		}
		FROM = {
			prestige = 100
		}
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}

noliege_conquest_dukes = {
	name = CB_NAME_NOLIEGE_DUKES
	war_name = WAR_NAME_NOLIEGE_DUKES
	sprite = 1
	truce_days = 400
	hostile_against_others = no
	is_permanent = yes
	can_call_allies = yes # Can either side call allies
	can_attack_vassals = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	can_ask_to_join_war = yes
	
	can_use = { 
		ROOT = { NOT = { has_character_modifier = holding_epic_tournament }	}
		ROOT = { NOT = { has_character_modifier = holy_truce_timer } }
		FROM = { NOT = { has_character_modifier = holy_truce_timer } }
		ROOT = { 
			AND = { 
				tier = DUKE
				NOT = { num_of_duke_titles = 3 }
				independent = yes
			}
		}
		FROM = {
			AND = {
				tier = DUKE
				NOT = { num_of_duke_titles = 3 }
			}
		}
	}
	
	can_use_title = {
		tier = count
		location = {   # target province
			AND = {
				NOT = { has_province_modifier = no_liege }
				owner = { same_realm = FROM }
				any_neighbor_province = {   # attacking from this province...
					OR = {
						AND = {   # ...which is of the attackers realm
							NOT = { has_province_modifier = no_liege }
							owner = { same_realm = ROOT }
							OR = {
								any_province_lord = { de_jure_liege_or_above = ROOT }
								any_province_lord = { de_jure_liege_or_above = FROM }
							}
						}
						AND = {   # which is separated from the target by only one sea province
							is_land = no
							any_neighbor_province = {
								AND = {
									NOT = { has_province_modifier = no_liege }
									owner = { same_realm = ROOT }
									OR = {
										any_province_lord = { de_jure_liege_or_above = ROOT }
										any_province_lord = { de_jure_liege_or_above = FROM }
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	is_valid_title = {
		location = {
			AND = {
				NOT = { has_province_modifier = no_liege }
				owner = { same_realm = FROM }
				any_neighbor_province = {
					OR = {
						AND = {
							NOT = { has_province_modifier = no_liege }
							owner = { same_realm = ROOT }
						}
						AND = {
							is_land = no
							any_neighbor_province = {
								AND = {
									NOT = { has_province_modifier = no_liege }
									owner = { same_realm = ROOT }
								}
							}
						}
					}
				}
			}
		}
	}
	
	on_add = {
	}
	
	on_success = {
		ROOT = { add_character_modifier = { name = victory_timer duration = 3 hidden = yes } }
	}
	on_success_title = {	
		if = {  # if the target province is ruled by a count vassal, take the vassal.
			limit = {
				holder_scope = {
					tier = count
					NOT = { num_of_count_titles = 2 }
				}
			}
			holder_scope = {
				set_defacto_liege = ROOT
			}
		}
		if = { #if the target is ruled by a count vassal with more titles, take the title
			limit = {
				holder_scope = {
					tier = count
					num_of_count_titles = 2
				}
			}
			usurp_title_plus_barony_if_unlanded = ROOT
			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				limit = {
					has_holder = yes
					NOT = {
						de_facto_liege = PREV
					}
					holder_scope = {
						OR = {
							character = FROM
							is_liege_or_above = FROM
						}
					}
				}
				usurp_title_plus_barony_if_unlanded = ROOT
			}
		}
		if = { # if the target is owned by the target duke, take the title
			limit = {
				holder_scope = {
					tier = duke
				}
			}
			usurp_title_plus_barony_if_unlanded = ROOT
			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				limit = {
					has_holder = yes
					NOT = {
						de_facto_liege = PREV
					}
					holder_scope = {
						OR = {
							character = FROM
							is_liege_or_above = FROM
						}
					}
				}
				usurp_title_plus_barony_if_unlanded = ROOT
			}
		}
	}
	on_fail = {
		ROOT = {
			prestige = -100
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -200
		}
		FROM = {
			prestige = 100
		}
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}

noliege_conquest_islanddukes = {
	name = CB_NAME_NOLIEGE_ISLANDDUKES
	war_name = WAR_NAME_NOLIEGE_ISLANDDUKES
	sprite = 1
	truce_days = 1095
	hostile_against_others = no
	is_permanent = yes
	can_call_allies = yes # Can either side call allies
	can_attack_vassals = yes
	check_all_titles = yes # if permanent, setting this to true will check against all of someones titles, including vassal held titles
	can_ask_to_join_war = yes
	
	can_use = { 
		ROOT = { NOT = { has_character_modifier = holding_epic_tournament }	}
		ROOT = { NOT = { has_character_modifier = holy_truce_timer } }
		FROM = { NOT = { has_character_modifier = holy_truce_timer } }
		ROOT = {
			AND = { 
				tier = DUKE
				NOT = { num_of_duke_titles = 3 }
				independent = yes
				OR = {
					NOT = {
						location = {
							any_neighbor_province = {
								is_land = yes
							}
						}
					}
					OR = { has_landed_title = d_austisland has_landed_title = d_vestisland }
				}
			}
		}
		FROM = {
			AND = {
				tier = DUKE
				NOT = { num_of_duke_titles = 3 }
				independent = yes
			}
		}
	}
	
	can_use_title = {
		tier = count
		location = {
			AND = {
				NOT = { has_province_modifier = no_liege }
				owner = { same_realm = FROM }
				any_neighbor_province = {
					AND = {  # enables attack over two sea areas
						is_land = no
						any_neighbor_province = {
							is_land = no
							any_neighbor_province = {
								AND = {
									NOT = { has_province_modifier = no_liege }
									owner = { same_realm = ROOT }
									OR = {
										NOT = { any_neighbor_province = { is_land = yes } }
										province = 1
										province = 2
									}
								}
							}
						}
					}
				}
			}
		}
	}
	
	is_valid_title = {
		location = {
			AND = {
				NOT = { has_province_modifier = no_liege }
				owner = { same_realm = FROM }
				any_neighbor_province = {
					AND = {  # enables attack over two sea areas
						is_land = no
						any_neighbor_province = {
							is_land = no
							any_neighbor_province = {
								AND = {
									NOT = { has_province_modifier = no_liege }
									owner = { same_realm = ROOT }
									NOT = { any_neighbor_province = { is_land = yes } }
								}
							}
						}
					}
				}
			}
		}
	}
	
	on_add = {
	}
	
	on_success = {
		ROOT = { add_character_modifier = { name = victory_timer duration = 3 hidden = yes } }
	}
	on_success_title = {	
		if = {
			limit = {
				holder_scope = {
					tier = count
					NOT = { num_of_count_titles = 2 }
				}
			}
			holder_scope = {
				set_defacto_liege = ROOT
			}
		}
		
		if = {
			limit = {
				holder_scope = {
					tier = duke
					num_of_duke_titles = 1
					NOT = { num_of_count_titles = 2 }
				}
			}
			holder_scope = {
				primary_title = {
					usurp_title = ROOT
				}
				any_demesne_title = {
					tier = count
					set_defacto_liege = ROOT
				}
			}
		}

		
		if = {
			limit = {
				holder_scope = {
					num_of_count_titles = 2
				}
			}
			usurp_title_plus_barony_if_unlanded = ROOT
			any_de_jure_vassal_title = { # take all baronies under the one we're fighting for
				limit = {
					has_holder = yes
					NOT = {
						de_facto_liege = PREV
					}
					holder_scope = {
						OR = {
							character = FROM
							is_liege_or_above = FROM
						}
					}
				}
				usurp_title_plus_barony_if_unlanded = ROOT
			}
		}
	}
	on_fail = {
		ROOT = {
			prestige = -100
		}
	}

	on_reverse_demand = {
		ROOT = {
			prestige = -200
		}
		FROM = {
			prestige = 100
		}
	}
	
	attacker_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	attacker_ai_defeat_worth = {
		factor = 100
	}

	defender_ai_victory_worth = {
		factor = -1 # always accept
	}
	
	defender_ai_defeat_worth = {
		factor = 100
	}
}
